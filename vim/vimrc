" Don't care about vi support
set nocompatible

" Add all plugins from pathogen
call pathogen#helptags()
call pathogen#runtime_append_all_bundles() 

" BEGIN INDENTATION
filetype plugin indent on " Use different indentation based on filetype
set expandtab " Turn <TAB> into spaces.
set softtabstop=4 " Number of spaces <TAB> expands to
set shiftwidth=4 " The width when pressing >>,<< or == and ai
set autoindent " Indent a new line equal to the one above.

" BEGIN LOOK
syntax on " Use syntax highlightning
set number " Show line numbers to the left
colorscheme desert " Use ir_black as default colorscheme
set background=dark " Optimize for dark background
set ruler " Show line and column separated by a comma in lower right
set showcmd " Show linecount in visual mode

" Turns on highlightning of characters which are after column 80
function EnableOverLength()
    highlight overlength ctermbg=red ctermfg=white guibg=#b0041b
    match OverLength /\%81v.\+/ 
    if v:version >= 703
        set colorcolumn=80
        hi ColorColumn guibg=#2d2d2d
    endif
    let g:overlength_on = 1
endfunction

" Turns off highlightning of characters which are after column 80
function DisableOverLength()
        highlight clear OverLength
        if v:version >= 703
            highlight clear ColorColumn
        endif
        let g:overlength_on = 0
endfunction

" Toggles highlightning of characters which are after column 80
function ToggleOverLength()
    if exists("g:overlength_on") && g:overlength_on == 1
        call DisableOverLength()
    else
        call EnableOverLength()
    endif
endfunction

" Enable the highlightning for all new buffers
function MaybeEnableOverLength()
    if !exists("g:overlength_on") || g:overlength_on == 1
        call EnableOverLength()
    endif
endfunction
autocmd BufEnter * call MaybeEnableOverLength() 

" BEGIN SYNTAX FILES
au BufRead,BufNewFile *.json set filetype=json

" BEGIN SEARCH
set hlsearch  " Highlight search
set incsearch  " Incremental search, search as you type
set smartcase " Ignore case when searching lowercase

" BEGIN COMPATABILITY
set backspace=2 " Fix backspace for strange terminals
autocmd BufRead,BufNewFile *.tex set wrapmargin=1 " Wrap lines in latex docs
" Saves additional stuff when saving a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" BEGIN KEYBOARD MAPPINGS

" Table for remembering different mapping modes:
"    map type     | normal | visual+select | operator-pending
" noremap (map)   |   y    |       y       |         y
" nnoremap (nmap) |   y    |       -       |         -
" vnoremap (vmap) |   -    |       y       |         -
" onoremap (omap) |   -    |       -       |         y

" mapping for camelcase plugin
" this is for normal movement
map <silent> w <Plug>CamelCaseMotion_w 
map <silent> b <Plug>CamelCaseMotion_b 
map <silent> e <Plug>CamelCaseMotion_e 
" NOTE: This doesn't seem to be needed?
"sunmap w
"sunmap b 
"sunmap e 

" this is for inner-word
omap <silent> iw <Plug>CamelCaseMotion_iw 
xmap <silent> iw <Plug>CamelCaseMotion_iw 
omap <silent> ib <Plug>CamelCaseMotion_ib 
xmap <silent> ib <Plug>CamelCaseMotion_ib 
omap <silent> ie <Plug>CamelCaseMotion_ie 
xmap <silent> ie <Plug>CamelCaseMotion_ie

" Change leader
let mapleader=","

" Open and close NERDTree
nmap <leader>t :NERDTreeToggle<CR>

" <CTRL>-t to create a new tab (in both insert and normal mode)
map <C-t> :tabnew<CR>
imap <C-t> <ESC>:tabnew<CR>

" <CTRL>-(arrow key) to switch tab (in both insert and normal mode)
map <C-Left> :tabprevious<CR>
map <C-Right> :tabnext<CR>
imap <C-Left> <Esc>:tabprevious<CR>i
imap <C-Right> <Esc>:tabnext<CR>i

map <C-h> :tabprevious<CR>
map <C-l> :tabnext<CR>
imap <C-h> <Esc>:tabprevious<CR>i
imap <C-l> <Esc>:tabnext<CR>i

" <SPACE> to switch windows (in normal mode)
map <Space> <c-w>w

" ,= to even out all splits
nmap <leader>= <C-w>=

" ,w to open new vertical split and move to it
nmap <leader>w <C-w>v<C-w>l

" <DASH> to turn on/off highlighted search
nnoremap <silent><leader><space> :noh<cr>

" Easy copy/paste to clipboard
map <leader>y "+y
nmap <leader>p "+p 

" Remap ESC to ii
imap ii <Esc>

" Toogle highlight with ,h
map <silent><leader>h :call ToggleOverLength()<cr>
